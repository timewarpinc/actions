name: Project Info

on:
  workflow_dispatch:
    inputs:
      project_number:
        type: number
        required: true

  workflow_call:
    inputs:
      project_number:
        required: true
        type: string
    outputs:
      project_id:
        description: "Project node_id"
        value: ${{ jobs.project-info.outputs.node_id }}
jobs:
  project-info:
    runs-on: ubuntu-latest
    outputs:
      node_id: ${{ steps.project.outputs.result }}
    steps:
      - name: Generate token
        id: token
        uses: tibdex/github-app-token@7ce9ffdcdeb2ba82b01b51d6584a6a85872336d4
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.CLIENT_PEM }}

      - name: Get Project info
        uses: actions/github-script@v5
        id: project
        with:
          result-encoding: string
          github-token: ${{ steps.token.outputs.token }}
          script: |
            console.log("CONTEXT: ", context);
            const project_number = context.payload.inputs.project_number;
            const owner = context.repo.owner;
            
            console.log({ project_number, owner });
            
            const getProject = `
              query($org: String!, $number: Int!) {
                organization(login: $org){
                  projectNext(number: $number) {
                    id
                    fields(first:20) {
                      nodes {
                        id
                        name
                        settings
                      }
                    }
                  }
                }
              }
            `;
            const project_info = await github.graphql(getProject, { number: parseInt(project_number, 10), org: owner });
            const project_id = project_info.organization.projectNext.id;
            
            return project_id;            
