name: Assign all issues to a project

on:
  workflow_dispatch:
    inputs:
      state:
        type: string
        required: true
        default: open
      repo:
        type: string
        required: true
      project_number:
        type: number
        required: true

  workflow_call:
    inputs:
      project_number:
        required: true
        type: number
      repo:
        type: string
        required: true

jobs:
  project_info:
    uses: timewarpinc/actions/.github/workflows/project-info.yml@main
    with:
      project_number: ${{  github.event.inputs.project_number }}
    secrets:
      APP_ID: ${{ secrets.APP_ID }}
      CLIENT_PEM: ${{ secrets.CLIENT_PEM }}

  assign-issues:
    runs-on: ubuntu-latest
    needs: project_info
    steps:
      - name: Generate token
        id: token
        uses: tibdex/github-app-token@7ce9ffdcdeb2ba82b01b51d6584a6a85872336d4
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.CLIENT_PEM }}
      - name: Assign issues to project
        uses: actions/github-script@v5
        with:
          github-token: ${{ steps.token.outputs.token }}
          script: |
            const project = ${{ toJSON(needs.project_info.outputs.project_id) }};
            const owner = context.repo.owner;
            const repo = context.payload.inputs.repo || context.repo.repo;
            const state = context.payload.inputs.state;
                        
            const addToProject = `
              mutation($project:ID!, $id:ID!) {
                addProjectNextItem(input: {projectId: $project, contentId: $id}) {
                  projectNextItem {
                    id
                  }
                }
              }
            `;
            
            for await (const response of github.paginate.iterator(github.rest.issues.listForRepo, { owner, repo, state: state })) {
              for (issue of response.data) {
                const status = await github.graphql(addToProject, { project , id: issue.node_id });
                console.log("STATUS: ", status);
              }
            }
            
             for await (const response of github.paginate.iterator(github.rest.pulls.list, { owner, repo, state: state })) {
              for (pr of response.data) {
                const status = await github.graphql(addToProject, { project, id: pr.node_id });
                console.log("STATUS: ", status);
              }
            }
